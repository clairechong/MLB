geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
?geom
?geom_boxplot
?geom_abline
?geom_line
?geom_histogram
?geom_area
ggplot(
data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)
) +
geom_point() +
geom_smooth(se = FALSE
ggplot(data = mpg,mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() + geom_smooth(se = FALSE)
ggplot(data = mpg,mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point()+geom_smooth(se=FALSE)
?geom_smooth
ggplot(data = mpg,mapping = aes(x = displ, y = hwy, color = drv)) +
+ geom_point()+geom_smooth(se=FALSE), show.legend=FALSE
ggplot(data = mpg,mapping = aes(x = displ, y = hwy, color = drv)) +
+ geom_point()+geom_smooth(se=FALSE)+show.legend=FALSE
?show.legend
??show.legend
?legend
?geom_smooth
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_line()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=5,stroke=5) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=3) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=5) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=8) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy,group=drv)) +
geom_point(size=8) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy,color=drv)) +
geom_point(size=8) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=8) +
geom_smooth(color=drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=8) +
geom_smooth(mapping = aes(x = displ, y = hwy,color=drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=8) +
geom_smooth(mapping = aes(x = displ, y = hwy,color=drv)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size=8) +
geom_smooth(mapping = aes(x = displ, y = hwy,color=drv)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
?stat_summary
exit
?stat_summary
?geom_col
?stat_smooth
?geom_bar
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..,group=2))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..,group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = color, y = ..prop..)
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = color, y = ..prop..,group=1)
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = color, y = ..prop..)
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = color, y = ..prop..,group=1)
)
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
?position_dodge
?position_fill
?position_identify
?position_identity
?position_jitter
?position_stack
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position="jitter")
?geom_jitter()
?geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
+     geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_count(mapping = aes(x = cty, y = hwy))
?geom_boxplot
geom_boxplot(mapping = aes(x = cty, y = hwy)
geom_boxplot(mapping = aes(x = cty, y = hwy))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class(), y = hwy)) + geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot()
?position_dodge
ggplot(data = diamonds) +
+     geom_bar(
+         mapping = aes(x = cut, fill = color, y = ..prop..,group=1)
+     )
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..,group=1))
ggplot(
+     data = diamonds,
+     mapping = aes(x = cut, color = clarity)
+ )
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+ geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+ geom_bar(fill = colour, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+ geom_bar(fill = color, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+ geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+ coord_polar()
ggplot(data = diamonds, mapping = aes(x = cut, fill = cut))+ geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut, fill = cut))+ coord_polar()
ggplot(data = diamonds)+geom_bar(mapping = aes(x = cut, fill = cut)+coord_polar()
ggplot(data = diamonds)+geom_bar(mapping = aes(x = cut, fill = cut)+coord_polar()
ggplot(data = diamonds)+geom_bar(mapping = aes(x = cut, fill = cut)+coord_flip()
ggplot(data = diamonds)+geom_bar(mapping = aes(x = cut, fill = cut)+coord_flip()
?coord_polar
ggplot(data = diamonds,aes(x=cut,y=cut))+geom_bar(width=1)
?mpg
?geom_abline
?exit
??exit
q
quit()
1/200*30
(59+73+2)/3
sin(pi/2)
x<-3*4
x
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name
this_is_a_really_long_name
this_is_a_really_long_name <- 3.5
this_is_a_really_long_name
r_rocks <- 2^3
r_rocks
r_rock
R_rocks
seq()
seq(1,10)
x <- "hello world"
x <- "hello
""
y <- seq(1,10,length.out=5)
(y <- seq(1,10,length.out=5))
my_variable <- 10
my_variable
library(tidyverse)
ggplot(data=mpg)+geom_point(mapping=aes(x=displ,y=hwy))
filter(mpg,cyl=8)
mpg
filter(mpg,'cyl'=8)
filter(mpg,cyl==8)
filter(diamond,carat>3)
filter(diamonds,carat>3)
library(nycflights13)
library(tidyverse)
nycflights13
library (nycflights13)
mpg
?flights
flights
flight
nycflight
library()
nycflights
filter(mpg,displ==1.8,drv=r)
filter(mpg,displ==1.8,drv==r)
filter(mpg,displ==1.8,drv==4)
newdf <- filter(mpg,year==2008,class==compact)
newdf <- filter(mpg,year==2008,class=="compact")
newdf
(newdf <- filter(mpg,year==2008,class=="compact"))
sqrt(2)^2==2
near(sqrt(2)^2==2)
near(sqrt(2)^2,2)
filter(mpg,model="impreza awd"|model="a4 quartro")
filter(mpg,model=="impreza awd"|model=="a4 quartro")
multimodel <- filter(mpg,model %in% c("impreza awd","a4 quattro")
))
multimodel <- filter(mpg,model %in% c("impreza awd","a4 quattro"))
(multimodel <- filter(mpg,model %in% c("impreza awd","a4 quattro")))
x <- NA
is.na(x)
?between
NA^0
NA|TRUE
NA*0
arrange(mpg,class,manufacturer,trans)
arrange(mpg,desc(cyl))
arrange(mpg,cyl)
df <- tibble(x=c(5,2,NA))
arrange(df,x)
arrange(df,desc(x))
arrange(df,is.na(x))
is,na(mpg)
is.na(mpg)
arrange(df,is.na(x))
arrange(df,desc(is.na(x))
arrange(df,desc(is.na(x)))
mpg
select(mpg,displ:drv)
select(mpg,-(displ:drv))
?select
select(mpg,displ,displ)
select(mpg,displ,everything())
?one_of
one_of(mpg,displ)
vars <- "year","month","day","dep_delay","arr_delay"
vars <- c("year","month","day","dep_delay","arr_delay")
c
one_of(c)
?one_of
select(mpg, contains("l"))
select(c,one_of())
?lag()
y <- c(1,2,2,NA,3,4)
min_rank(y)
?min_rank
x <- c(5,1,3,2,2,NA)
min_rank(x)
?rank
lahman
library(lahman)
?mutate
install.packages("nycflights13")
library(nycflights13)
flights
?flights
diamonds
ggplot(diamonds) +
geom_histogram(mapping = aes(price), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(price), binwidth = 1)
ggplot(diamonds) +
geom_histogram(mapping = aes(price), binwidth = 10)
ggplot(diamonds) +
geom_histogram(mapping = aes(price), binwidth = 40)
?diamonds
ggplot(diamonds) +
geom_histogram(mapping = aes(x), binwidth = 40)
ggplot(diamonds) +
geom_histogram(mapping = aes(y), binwidth = 40)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y), binwidth = 40)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y), binwidth = .5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x), binwidth = .5)
ggplot(diamonds) +
geom_histogram(mapping = aes(y), binwidth = .5)
ggplot(diamonds) +
geom_histogram(mapping = aes(z), binwidth = .5)
ggplot(diamonds) +
geom_histogram(mapping = aes(price), binwidth = 40)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = 40)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = 1)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = /5)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = .5)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = .2)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = .125)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = .005)
ggplot(diamonds) +
geom_histogram(mapping = aes(carat), binwidth = .009)
?confusion matrix
library(ggplot2)
library(dplyr)
weather <- read.csv("../datasets/seattleWeather_1948-2017.csv", header = TRUE)
nrow(weather)
class(weather)
summary(weather)
weather=na.omit(weather)
nrow(weather) #to check that NAs were removed
library('lubridate')
mdy_hm(weather[1,])
weather$DATE=as.Date(weather$DATE)
weather$MONTH=month(weather$DATE)
weather$YEAR=year(weather$DATE)
head(weather) #to check that new columns added
#convert temperatures and precipitation
weather$TMAX_CELSIUS=((weather$TMAX-32)*5/9)
weather$TMIN_CELSIUS=((weather$TMIN-32)*5/9)
weather$PRCP_MM=(weather$PRCP/0.039370078740157)
weather$PRCP=NULL
weather$TMAX=NULL
weather$TMIN=NULL
weather=weather[c("DATE","YEAR","MONTH","TMAX_CELSIUS","TMIN_CELSIUS","PRCP_MM","RAIN")]
count(weather,YEAR)
weather <- read.csv("../datasets/seattleWeather_1948-2017.csv", header = TRUE)
weather <- read.csv("../My R Stuff/seattleWeather_1948-2017.csv", header = TRUE)
weather <- read.csv("../datasets/seattleWeather_1948-2017.csv", header = TRUE)
library(readr)
weather <- read.csv("../datasets/seattleWeather_1948-2017.csv", header = TRUE)
library(tidyverse)
weather <- read.csv("../datasets/seattleWeather_1948-2017.csv", header = TRUE)
weather <- read.csv("../datasets/seattleWeather_1948-2017-1.csv", header = TRUE)
weather <- read.csv("../My R Stuff/seattleWeather_1948-2017.csv", header = TRUE)
getwd()
setwd(C:/Users/jpano/Documents/DATA ANALYTICS COURSE/CSDA1010/My R Stuff)
setwd(C://Users/jpano/Documents/DATA ANALYTICS COURSE/CSDA1010/My R Stuff)
setwd(C:Users/jpano/Documents/DATA ANALYTICS COURSE/CSDA1010/My R Stuff)
doubledip <- function(x,y)
temp1=x*y
temp1=abs(temp1)
temp2=sqrt(temp1)
z=sqrt(temp2)
return(z)
library(dbplyr)
doubledip <- function(x,y)
temp1=x*y
temp1=abs(temp1)
temp2=sqrt(temp1)
getwd()
setwd("C:/Users/jpano/Documents/DATA ANALYTICS COURSE/CSDA 1010/My R Stuff")
matrix1=matrix(sampe(c(0,1),100,replace=T),nrow=10)
matrix1=matrix(sample(c(0,1),100,replace=T),nrow=10)
matrix1
matrix2=matrix(rnorm(100),nrow=10)
matrix2
matrix3=matrix1%*%matrix2
matrix3
%*%
?%*%
debug(doubledip(input))
debug(doubledip(x))
plot(cars)
setwd("C:/Users/jpano/Documents/DATA ANALYTICS COURSE/CSDA1010/My R Stuff")
library(readr)
library(ggplot2)
library(dplyr)
library(reshape2)
#read file
teams=read_csv("Teams.csv",col_name=TRUE,na=c("","NA","#NA"))
#explore data
head(teams)
str(teams)
summary(teams)
#rows & columns
dim(teams)
#data types
sapply(teams, class)
#convert datatypes from chr to int
cols = c("SF","HBP")
teams[,cols] = apply(teams[,cols], 2, function(x) as.integer(as.character(x)))
#filter for 1960+
teamdata=filter(teams,yearID >=1960)
#check for missing values
colSums(is.na(teamdata))
#no divisions in earlier years, remove divID, DivWin, WCWin, LgWin, WSWin since not being used as dep/indep vars and they're categorical vars
#HBP, SF blanks means they weren't tracked then - remove
teamdata$divID=teamdata$DivWin=teamdata$WCWin=teamdata$LgWin=teamdata$WSWin=teamdata$HBP=teamdata$SF=NULL
#franchID + last 3 columns not needed as they are names of the team which we already have
teamdata$franchID=teamdata$teamIDBR=teamdata$teamIDlahman45=teamdata$teamIDretro=NULL
#checked NAs gone after removal of columns
colSums(is.na(teamdata))
#reduced # columns from 48 to 37, removal of 11 columns
dim (teamdata)
summary(teamdata)
#visualize
#plot avg # wins by year
winsgb=aggregate(teamdata$W, by=list(teamdata$yearID), FUN=mean)
ggplot(winsgb,aes(winsgb[,1],winsgb[,2]),na.rm=TRUE)+geom_point()+geom_line()
labs(x="Year", y="Mean of Wins", title=paste("Avg Wins by Year"))
ggplot(winsgb,aes(winsgb[,1],winsgb[,2]),na.rm=TRUE)+geom_point()+geom_line()+
labs(x="Year", y="Mean of Wins", title=paste("Avg Wins by Year"))
#plot avg # wins by team
winsgb_team=aggregate(teamdata$W, by=list(teamdata$teamID), FUN=mean)
ggplot(winsgb_team,aes(winsgb_team[,1],winsgb_team[,2]),na.rm=TRUE)+geom_col()+
labs(x="Team", y="Mean of Wins", title=paste("Avg Wins by Team"))
#plot attendance by year
attendgb_year=aggregate(teamdata$attendance, by=list(teamdata$yearID), FUN=mean)
ggplot(attendgb_year,aes(attendgb_year[,1],attendgb_year[,2]),na.rm=TRUE)+geom_col()+
labs(x="Year", y="Mean of Attendance", title=paste("Avg Attendance by Year"))
#plot attendance by team
attendgb_team=aggregate(teamdata$attendance, by=list(teamdata$teamID), FUN=mean)
ggplot(attendgb_team,aes(attendgb_team[,1],attendgb_team[,2]),na.rm=TRUE)+geom_col()+
labs(x="Team", y="Mean of Attendance", title=paste("Avg Attendance by Team"))
#plot attendance by team
attendgb_team=aggregate(teamdata$attendance, by=list(teamdata$teamID), FUN=mean)
attendgb_team <- within(attendgb_team[,1],levels=names(sort(table(attendgb_team),decreasing=TRUE)))
attendgb_team <- within(attendgb_team[,1],
teamID <- factor(teamID,
levels=names(sort(table(attendgb_team),decreasing=TRUE))))
attendgb_team <- data[order(attendgb_team[,2],decreasing = TRUE),]
#remove the strike years so wins are comparable
teamdata1=filter(teamdata, yearID != 1981)
teamdata2=filter(teamdata1, yearID != 1994)
teamdata3=filter(teamdata2, yearID != 1995)
#check the 3 years were removed
unique(teamdata3$yearID)
# Get only numeric colums
list_of_numcols = sapply(teamdata3, is.numeric)
numcols = teamdata3[ , list_of_numcols]
melt_data = melt(numcols, id.vars=c("yearID"))
#This data structure is now suitable for a multiplot function
ggplot(data = melt_data, mapping = aes(x = value)) + geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
#team proportion
percentage <- prop.table(table(teamdata3$name)) * 100
cbind(freq=table(teamdata$name), percentage=percentage)
#park proportion
percentage1 <- prop.table(table(teamdata3$park)) * 100
cbind(freq=table(teamdata$park), percentage=percentage1)
#league proportion
percentage2 <- prop.table(table(teamdata3$lgID)) * 100
cbind(freq=table(teamdata$lgID), percentage=percentage2)
#correlation matrix
teamdata3_subset= teamdata3[,c("W","attendance","R","AB","H","HR","BB","SO","SB","RA","ERA","SHO","SV","HA","HRA","BBA","SOA","E","DP","FP")]
cor(teamdata3_subset, method = c("pearson"),  use = "complete.obs")
#correlation matrix
teamdata3_subset= teamdata3[,c("W","attendance","R","RA","ERA","SV","SOA","E","FP")]
cor(teamdata3_subset, method = c("pearson"),  use = "complete.obs")
select_parameters=teamdata3_subset[,c("W","attendance","R","SV","SOA","FP","RA")]
summary(select_parameters)
control <- trainControl(method="cv", number=10)
library(caret)
control <- trainControl(method="cv", number=10)
require(caTools)
set.seed(101)
samplew = sample.split(wins_parameters$W, SplitRatio = .70)
trainw = subset(wins_parameters, samplew == TRUE)
testw  = subset(wins_parameters, samplew == FALSE)
wins_parameters=select_parameters[,c("W","R","RA","SV")]
attend_parameters=select_parameters[,c("attendance","R","SV","SOA","FP")]
require(caTools)
set.seed(101)
samplew = sample.split(wins_parameters$W, SplitRatio = .70)
trainw = subset(wins_parameters, samplew == TRUE)
testw  = subset(wins_parameters, samplew == FALSE)
fitw_cv<- train(W~., data=trainw, trControl=control, method="lm")
fitw_cv
summary(fitw_cv)
testw$pred <- predict(fitw_cv,newdata=testw,type='raw')
summary(testw$pred)
fitw_glm<- train(W~., data=trainw, method="randomGLM")
set.seed(101)
samplea = sample.split(attend_parameters$attendance, SplitRatio = .70)
traina = subset(attend_parameters, samplea == TRUE)
testa  = subset(attend_parameters, samplea == FALSE)
?confint
confint(fitw_cv)
t.test(testw$pred)
summary(testw$pred)
